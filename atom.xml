<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZY-Zhang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://crunchybiscuits.github.io/"/>
  <updated>2020-12-18T01:59:39.085Z</updated>
  <id>https://crunchybiscuits.github.io/</id>
  
  <author>
    <name>ZY-Zhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GAMES101Assignment2</title>
    <link href="https://crunchybiscuits.github.io/2020/12/18/GAMES101Assignment2/"/>
    <id>https://crunchybiscuits.github.io/2020/12/18/GAMES101Assignment2/</id>
    <published>2020-12-18T01:59:39.000Z</published>
    <updated>2020-12-18T01:59:39.085Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>GAMES101 Assignment1</title>
    <link href="https://crunchybiscuits.github.io/2020/12/11/GAMES101Assignment1/"/>
    <id>https://crunchybiscuits.github.io/2020/12/11/GAMES101Assignment1/</id>
    <published>2020-12-11T02:25:28.000Z</published>
    <updated>2020-12-18T02:31:06.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GAMES101-Assignment1-对应Lecture3-4"><a href="#GAMES101-Assignment1-对应Lecture3-4" class="headerlink" title="GAMES101 Assignment1 (对应Lecture3-4)"></a>GAMES101 Assignment1 (对应Lecture3-4)</h1><p>课程作业框架来自<a href="http://games-cn.org/forums/topic/allhw/">GAMES</a></p><h2 id="基础部分："><a href="#基础部分：" class="headerlink" title="基础部分："></a>基础部分：</h2><p>目标要求：需要完成一个旋转矩阵和一个透视投影矩阵，根据给定的三维坐标在屏幕上绘制相应的三角形。</p><p><strong>main.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 绕Z轴旋转矩阵</span></span><br><span class="line"><span class="comment">*    return model</span></span><br><span class="line"><span class="comment">*    parameters:</span></span><br><span class="line"><span class="comment">*        rotation_angle:旋转角度</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function">Eigen::Matrix4f <span class="title">get_model_matrix</span><span class="params">(<span class="keyword">float</span> rotation_angle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Eigen::Matrix4f model = Eigen::Matrix4f::Identity();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Implement this function</span></span><br><span class="line">    <span class="comment">// Create the model matrix for rotating the triangle around the Z axis.</span></span><br><span class="line">    <span class="comment">// Then return it.</span></span><br><span class="line">    <span class="comment">// 框架提供的转为弧度制函数</span></span><br><span class="line">    <span class="keyword">float</span> angle = radian(rotation_angle);</span><br><span class="line">    <span class="keyword">float</span> cos_angle = <span class="built_in">cos</span>(angle);</span><br><span class="line">    <span class="keyword">float</span> sin_angle = <span class="built_in">sin</span>(angle); </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 旋转矩阵</span></span><br><span class="line">    Eigen::Matrix4f rotation_matrix;</span><br><span class="line">    rotation_matrix&lt;&lt;cos_angle,-sin_angle,<span class="number">0</span>,<span class="number">0</span>,sin_angle,cos_angle,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>;</span><br><span class="line">    model = rotation_matrix * model;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> model;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  透视投影矩阵</span></span><br><span class="line"><span class="comment">*    return Eigen::Matrix4f projection</span></span><br><span class="line"><span class="comment">*    parameters</span></span><br><span class="line"><span class="comment">*        eye_fov: 垂直可视度</span></span><br><span class="line"><span class="comment">*        aspect_ratio: width/height</span></span><br><span class="line"><span class="comment">*        zNear&gt;0, zFar&gt;0</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function">Eigen::Matrix4f <span class="title">get_projection_matrix</span><span class="params">(<span class="keyword">float</span> eye_fov, <span class="keyword">float</span> aspect_ratio,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      <span class="keyword">float</span> zNear, <span class="keyword">float</span> zFar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Students will implement this function</span></span><br><span class="line">    <span class="comment">// 默认单位矩阵</span></span><br><span class="line">    Eigen::Matrix4f projection = Eigen::Matrix4f::Identity();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Implement this function</span></span><br><span class="line">    <span class="comment">// Create the projection matrix for the given parameters.</span></span><br><span class="line">    <span class="comment">// Then return it.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> half_height = <span class="built_in">tan</span>(eye_fov/<span class="number">2</span>*MY_PI/<span class="number">180</span>)*zNear;</span><br><span class="line">    <span class="keyword">float</span> half_width = aspect_ratio*half_height;</span><br><span class="line">    <span class="comment">// 透视范围顶部</span></span><br><span class="line">    <span class="keyword">float</span> t = half_height;</span><br><span class="line">    <span class="comment">// 透视范围右侧</span></span><br><span class="line">    <span class="keyword">float</span> r = half_width;</span><br><span class="line">    <span class="comment">// 透视范围底部</span></span><br><span class="line">    <span class="keyword">float</span> b = -half_height;</span><br><span class="line">    <span class="comment">// 透视范围左侧</span></span><br><span class="line">    <span class="keyword">float</span> l = -half_width;</span><br><span class="line">    <span class="comment">// 近端, 因为是z轴负方向</span></span><br><span class="line">    <span class="keyword">float</span> n = -zNear;</span><br><span class="line">    <span class="comment">// 远端</span></span><br><span class="line">    <span class="keyword">float</span> f = -zFar;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 变换透视投影的方式是将透视投影转变成正交投影</span></span><br><span class="line">    Eigen::Matrix4f S,T,M;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 缩放成canonical</span></span><br><span class="line">    S&lt;&lt;</span><br><span class="line">    <span class="number">2</span>/(r-l),<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">2</span>/(t-b),<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>/(n-f),<span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正交投影的平移矩阵，平移到原点</span></span><br><span class="line">    T&lt;&lt;</span><br><span class="line">    <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,-(l+r)/<span class="number">2</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,-(b+t)/<span class="number">2</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,-(n+f)/<span class="number">2</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 透视投影转正交投影</span></span><br><span class="line">    M&lt;&lt;</span><br><span class="line">    zNear,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,zNear,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">0</span>,zNear+zFar,-zFar*zNear,</span><br><span class="line">    <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    projection = S * T * M * projection;</span><br><span class="line">    <span class="keyword">return</span> projection;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提高部分："><a href="#提高部分：" class="headerlink" title="提高部分："></a>提高部分：</h2><p>目标要求：在main.cpp实现一个函数完成绕任意过原点轴的旋转变换矩阵</p><p>绕任意轴旋转函数(<strong>罗德里格斯公式</strong>)</p><p>绕n轴旋转α角度</p><p><strong>R(n,α) = cos(α) * I + (1 - cos(α)) * n * n_transpose + sin(α) * N；其中I为单位矩阵，N为n的反对称阵</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">*绕axis轴旋转rotation_angle</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function">Eigen::Matrix4f <span class="title">get_rotation</span><span class="params">(Vector3f axis, <span class="keyword">float</span> rotation_angle)</span></span>&#123;</span><br><span class="line">    Eigen::Matrix4f model = Eigen::Matrix4f::Identity();</span><br><span class="line">    <span class="keyword">float</span> angle = radian(rotation_angle);</span><br><span class="line">    </span><br><span class="line">    Eigen::Matrix3f I = Eigen::Matrix3f::Identity();</span><br><span class="line">    <span class="comment">// n的反对称阵</span></span><br><span class="line">    Eigen::Matrix3f N;</span><br><span class="line">    N&lt;&lt;</span><br><span class="line">         <span class="number">0</span>, -axis.z(), axis.y(),</span><br><span class="line">        axis.z(), <span class="number">0</span>, -axis.x(),</span><br><span class="line">        -axis.y(), axis.x(), <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 罗德里格斯</span></span><br><span class="line">    Eigen::Matrix3f rotation_matrix = <span class="built_in">cos</span>(angle) * I + (<span class="number">1</span>-<span class="built_in">cos</span>(angle)) * axis * axis.transpose() + <span class="built_in">sin</span>(angle) * N;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将3*3变成4*4</span></span><br><span class="line">    model.block&lt;<span class="number">3</span>, <span class="number">3</span>&gt;(<span class="number">0</span>,<span class="number">0</span>) = rotation_matrix;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> model.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;GAMES101-Assignment1-对应Lecture3-4&quot;&gt;&lt;a href=&quot;#GAMES101-Assignment1-对应Lecture3-4&quot; class=&quot;headerlink&quot; title=&quot;GAMES101 Assignment1 (对应Le
      
    
    </summary>
    
    
    
      <category term="GAMES101" scheme="https://crunchybiscuits.github.io/tags/GAMES101/"/>
    
  </entry>
  
  <entry>
    <title>shader入门-(线性代数)</title>
    <link href="https://crunchybiscuits.github.io/2020/09/19/shader%E5%85%A5%E9%97%A8-(%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0)/"/>
    <id>https://crunchybiscuits.github.io/2020/09/19/shader%E5%85%A5%E9%97%A8-(%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0)/</id>
    <published>2020-09-19T01:36:59.000Z</published>
    <updated>2020-12-17T04:07:48.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shader基础数学"><a href="#Shader基础数学" class="headerlink" title="Shader基础数学"></a>Shader基础数学</h1><p>仅用作个人的常用提示，不会有全部详细介绍，资料来自《Unity Shader入门精要》</p><h1 id="笛卡尔坐标系"><a href="#笛卡尔坐标系" class="headerlink" title="笛卡尔坐标系"></a>笛卡尔坐标系</h1><h3 id="笛卡尔坐标系-1"><a href="#笛卡尔坐标系-1" class="headerlink" title="笛卡尔坐标系"></a>笛卡尔坐标系</h3><ul><li><p>构成</p><ul><li><p>原点</p></li><li><p>N条过原点，相互垂直的坐标轴，主要看是几维</p></li></ul></li></ul><p><strong>OpenGL和DirectX使用的笛卡尔坐标系不同</strong></p><p>坐标轴又称作，<strong>基矢量</strong></p><p>长度为1，的基矢量 — <strong>标准正交基</strong></p><p>四维空间 — <strong>齐次坐标系</strong></p><hr><h2 id="左-右手坐标系"><a href="#左-右手坐标系" class="headerlink" title="左/右手坐标系"></a>左/右手坐标系</h2><p> 三维的笛卡尔坐标系并不都是等价的，如果有相同<strong>旋向性</strong>，就可以通过旋转方法来让两个坐标系重合，但是如果旋向性不同，就不能重合。</p><p>在Unity中</p><ul><li><strong>模型空间</strong>和<strong>世界空间</strong>使用了<strong>左手坐标系</strong></li><li><strong>观察空间</strong>使用了<strong>右手坐标系</strong></li></ul><hr><h1 id="点和矢量"><a href="#点和矢量" class="headerlink" title="点和矢量"></a>点和矢量</h1><p>点 – 空间中的一个位置</p><p>矢量/向量 – 包含<strong>模</strong>和<strong>方向</strong>的有向线段， 通常用来表示相对于某个点的偏移，只要模和方向不变，放哪儿都一样</p><h2 id="矢量运算"><a href="#矢量运算" class="headerlink" title="矢量运算"></a>矢量运算</h2><h3 id="点积-—-结果是标量"><a href="#点积-—-结果是标量" class="headerlink" title="点积 — 结果是标量"></a>点积 — 结果是标量</h3><p><strong>a</strong> · <strong>b</strong> = (ax,ay,az) · (bx,by,bz) = axbx + ayby + azbz </p><p><strong>a</strong> · <strong>b</strong> = |<strong>a</strong>||<strong>b</strong>|cosθ </p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><ul><li><p><strong>a</strong> · <strong>b</strong> = <strong>b</strong> · <strong>a</strong></p></li><li><p>k<strong>a</strong> · <strong>b</strong> = <strong>a</strong> · k<strong>b</strong> </p></li><li><p><strong>a</strong> · (<strong>b</strong> + <strong>c</strong>) = <strong>a</strong> · <strong>b</strong> + <strong>a</strong> · <strong>c</strong>  </p></li><li><p><strong>a</strong> · <strong>a</strong> = |<strong>a</strong>|^2</p></li><li><p>几何意义 — 投影</p></li></ul><h3 id="叉积-—-结果是矢量"><a href="#叉积-—-结果是矢量" class="headerlink" title="叉积 — 结果是矢量"></a>叉积 — 结果是矢量</h3><p><strong>a</strong> X <strong>b</strong> = (ax,ay,az) X (bx,by,bz) = (aybz - azby, azbx - axbz, axby - aybx)</p><p><strong>a</strong> X <strong>b</strong> = |<strong>a</strong>||<strong>b</strong>|sinθ </p><h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h4><ul><li><strong>a</strong> X <strong>b</strong> ！= <strong>b</strong> X <strong>a</strong></li><li><strong>a</strong> X <strong>b</strong> = - (<strong>b</strong> X <strong>a</strong>)</li></ul><p><strong>a</strong> X <strong>b</strong> 方向的确认，先判断是左手还是右手坐标系，接着</p><hr><h1 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h1><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p><strong>对角元素</strong> – 行号和列号相同的元素</p><p><strong>转置矩阵</strong> – r X c 变成 c X r   </p><p>行列式不为0，既是可逆</p><p><strong>正交矩阵</strong> – 矩阵和它转置矩阵的乘积是单位矩阵</p><ul><li>矩阵的每一行，即c1、c2 和c3 是单位矢量，因为只有这样它们与自己的点积才能是1；</li><li>矩阵的每一行，即c1、c2 和c3 之间互相垂直，因为只有这样它们之间的点积才能是0。</li><li>上述两条结论对矩阵的每一列同样适用，因为如果M是正交矩阵的话，MT 也会是正交矩阵。</li></ul><h3 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h3><p>线性 – 缩放，旋转，错切，镜像，正交投影</p><p>三维到四维的变化</p><ul><li><p>点 — 添加 1</p></li><li><p>矢量 — 添加 0</p></li></ul><h1 id="基础变换矩阵分解"><a href="#基础变换矩阵分解" class="headerlink" title="基础变换矩阵分解"></a>基础变换矩阵分解</h1><p>一个基础变换矩阵可以分解成4部分</p><p><img src= "/img/loading.gif" data-lazy-src="/img/shader1.jpg" alt=""></p><p>左上角矩阵<strong>M</strong>用于表示旋转和缩放，<strong>t</strong>用来表示平移，<strong>0</strong>表示零矩阵，右下角元素就是标量1</p><p>Unity中旋转顺序是ZXY</p><p>绕坐标系E 下的z 轴旋转z，绕坐标系E 下的y 轴旋转y，绕坐标系E 下的x 轴旋转x，即进行一次旋转时不一起旋转当前坐标系。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Shader基础数学&quot;&gt;&lt;a href=&quot;#Shader基础数学&quot; class=&quot;headerlink&quot; title=&quot;Shader基础数学&quot;&gt;&lt;/a&gt;Shader基础数学&lt;/h1&gt;&lt;p&gt;仅用作个人的常用提示，不会有全部详细介绍，资料来自《Unity Shader
      
    
    </summary>
    
    
    
      <category term="Shader" scheme="https://crunchybiscuits.github.io/tags/Shader/"/>
    
  </entry>
  
  <entry>
    <title>链表练习中未注意的点</title>
    <link href="https://crunchybiscuits.github.io/2020/08/19/%E9%93%BE%E8%A1%A8%E7%BB%83%E4%B9%A0%E4%B8%AD%E6%9C%AA%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/"/>
    <id>https://crunchybiscuits.github.io/2020/08/19/%E9%93%BE%E8%A1%A8%E7%BB%83%E4%B9%A0%E4%B8%AD%E6%9C%AA%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/</id>
    <published>2020-08-19T04:19:31.000Z</published>
    <updated>2020-08-19T02:28:50.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="特定深度节点链表"><a href="#特定深度节点链表" class="headerlink" title="特定深度节点链表"></a>特定深度节点链表</h1><p>题目取自《程序员面试金典》4.3</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>类似广度优先遍历，通过遍历每一层，并逐层添加相应节点</p><h3 id="错误来源"><a href="#错误来源" class="headerlink" title="错误来源"></a>错误来源</h3><p>没有正确的处理链表头节点的位置，因为力扣题目里没有直接使用LinkedList类，而是使用了最基本的节点，所以需要使用一个指针对头节点进行保存，另一个指针进行添加操作。</p><p>错误示范</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode[] <span class="title">addLists</span>(<span class="params">ListNode[] listOfLevel, <span class="keyword">int</span> index, TreeNode tree</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tree == <span class="literal">null</span>) <span class="keyword">return</span> listOfLevel;</span><br><span class="line">        ListNode temp = listOfLevel[index];</span><br><span class="line">        <span class="keyword">while</span> (temp!= <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = <span class="keyword">new</span> ListNode(tree.val);</span><br><span class="line">        temp = temp.next;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> listOfLevel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正确答案"><a href="#正确答案" class="headerlink" title="正确答案"></a>正确答案</h3><p>先通过c#，list类对每一层进行节点的创建，设置计数器对每一层的节点数量进行控制，最后再创建答案的数组。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode[] <span class="title">ListOfDepth</span>(<span class="params">TreeNode tree</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    List&lt;ListNode&gt; listOfLevels = <span class="keyword">new</span> List&lt;ListNode&gt;();</span><br><span class="line">    <span class="keyword">int</span> curr = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> next = <span class="number">0</span>;</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> Queue&lt;TreeNode&gt;();</span><br><span class="line">    queue.Enqueue(tree);</span><br><span class="line">    ListNode node = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    ListNode find = node;</span><br><span class="line">    <span class="keyword">while</span> (queue.Count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        TreeNode temp = queue.Dequeue();</span><br><span class="line">        node.next = <span class="keyword">new</span> ListNode(temp.val);</span><br><span class="line">        node = node.next;</span><br><span class="line">        curr--;</span><br><span class="line">        <span class="keyword">if</span> (temp.left != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            queue.Enqueue(temp.left);</span><br><span class="line">            next++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp.right != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            queue.Enqueue(temp.right);</span><br><span class="line">            next++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(curr == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            curr = next;</span><br><span class="line">            next = <span class="number">0</span>;</span><br><span class="line">            listOfLevels.Add(find.next);</span><br><span class="line">            node = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">            find = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> listOfLevels.ToArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;特定深度节点链表&quot;&gt;&lt;a href=&quot;#特定深度节点链表&quot; class=&quot;headerlink&quot; title=&quot;特定深度节点链表&quot;&gt;&lt;/a&gt;特定深度节点链表&lt;/h1&gt;&lt;p&gt;题目取自《程序员面试金典》4.3&lt;/p&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot;
      
    
    </summary>
    
    
    
      <category term="Linked List" scheme="https://crunchybiscuits.github.io/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>LinkedList介绍</title>
    <link href="https://crunchybiscuits.github.io/2020/08/10/LinkedList%E4%BB%8B%E7%BB%8D/"/>
    <id>https://crunchybiscuits.github.io/2020/08/10/LinkedList%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-08-10T14:50:16.000Z</published>
    <updated>2020-08-10T14:43:52.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linked-List-介绍"><a href="#Linked-List-介绍" class="headerlink" title="Linked List 介绍"></a>Linked List 介绍</h1><p>资料来源《程序员面试金典》第九章</p><p>链表是由一些列节点(node)组成的数据结构，每个节点拥有指向下一个节点的指针(双向链表中，每一个节点同时拥有指向上一个节点和下一个节点的指针)。</p><p>单链表：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/CrunchyBiscuits/Image-Host/master/img/linkedlist2.png" alt="单链表"></p><p>双链表：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/CrunchyBiscuits/Image-Host/master/img/linkedlist1.png" alt="双链表"></p><p>链表的好处是可以在常数的时间添加和删除元素，在特定的情况下特别有用。和数组不同的是，链表无法在常数时间复杂度内访问链表的一个特定索引，如果想要访问第N个元素，就需要迭代访问N次。</p><h2 id="Node数据结构"><a href="#Node数据结构" class="headerlink" title="Node数据结构"></a>Node数据结构</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> T Data &#123; <span class="keyword">set</span>; <span class="keyword">get</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> Node&lt;T&gt; Next &#123; <span class="keyword">set</span>; <span class="keyword">get</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span>(<span class="params">T val</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Data = val;</span><br><span class="line">        <span class="keyword">this</span>.Next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Data = <span class="keyword">default</span>(T);</span><br><span class="line">        <span class="keyword">this</span>.Next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LinkedList数据结构"><a href="#LinkedList数据结构" class="headerlink" title="LinkedList数据结构"></a>LinkedList数据结构</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">T</span>&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> Node&lt;T&gt; header &#123; <span class="keyword">set</span>; <span class="keyword">get</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.header = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Linked-List-习题"><a href="#Linked-List-习题" class="headerlink" title="Linked List 习题"></a>Linked List 习题</h1><h3 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h3><p>《程序员面试金典》第九章2.4</p><p>编写程序以 x 为基准分割链表，使得所有小于 x 的节点排在大于或等于 x 的节点之前。如果链表中包含 x，x 只需出现在小于 x 的元素之后(如下所示)。分割元素 x 只需处于“右半部分”即可，其不需要被置于左右两部分之间。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: head &#x3D; 3-&gt;5-&gt;8-&gt;5-&gt;10-&gt;2-&gt;1, x &#x3D; 5</span><br><span class="line">输出: 3-&gt;1-&gt;2-&gt;10-&gt;5-&gt;5-&gt;8</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>使用头插法，将碰到的小于x的节点直接插入到链表头的前面</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">Partition</span>(<span class="params">ListNode head, <span class="keyword">int</span> x</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        ListNode shadow = head;</span><br><span class="line">        <span class="keyword">while</span> (shadow.next!= <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (shadow.next.val &lt; x)</span><br><span class="line">            &#123;</span><br><span class="line">                ListNode temp = shadow.next;</span><br><span class="line">                shadow.next = temp.next;</span><br><span class="line">                temp.next = head;</span><br><span class="line">                head = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                shadow = shadow.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h3><p>《程序员面试金典》第九章2.8</p><p>给定一个链表，如果它是有环链表，实现一个算法返回环路的开头节点。<br>有环链表的定义：在链表中某个节点的next元素指向在它前面出现过的节点，则表明该链表存在环路。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head &#x3D; [3,2,0,-4], pos &#x3D; 1</span><br><span class="line">输出：tail connects to node index 1</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head &#x3D; [1,2], pos &#x3D; 0</span><br><span class="line">输出：tail connects to node index 0</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head &#x3D; [1], pos &#x3D; -1</span><br><span class="line">输出：no cycle</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/CrunchyBiscuits/Image-Host/master/img/linkedlist3.jpg" alt="环路检测"></p><p>使用“快行指针”进行求解，假设一个慢指针一次走一步，一个快指针一次走两步，如果链表有环，那么快指针和慢指针肯定会相遇。</p><ul><li>x: 链表起点</li><li>y: 环的起点</li><li>A: 链表起点到环的起点的长度</li><li>B: 环的起点到两个指针相遇的位置的长度</li></ul><p>到相遇点为止，慢指针走过了距离 s1 = A + B, 快指针走过了 s2 = A + B + N * (环路长度)， 也就是说快指针走了N圈和慢指针相遇了。又因为快指针一次走两步，慢指针一次走一步，所以快指针走过的距离s2是慢指针走过的距离s1的两倍：2*s1 = s2，得到 2( A + B ) = A + B + N * (环路长度)。我们需要求 y 的位置，也就是计算A的长度。简化得到 A = N * (环路长度) - B</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">DetectCycle</span>(<span class="params">ListNode head</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ListNode slow = head;</span><br><span class="line">    ListNode fast = head;</span><br><span class="line">            </span><br><span class="line">    <span class="comment">// 找到相遇点</span></span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next!=<span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        <span class="keyword">if</span>(slow == fast)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (slow != fast) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    fast = head;</span><br><span class="line">    <span class="comment">// A = N * (环路长度) - B，可以理解为一个指针从起点开始走，另一个指针走了N圈减去B的</span></span><br><span class="line">    <span class="comment">// 长度，因为这里慢指针已经停在了相遇点，既已经从一圈里减去了B</span></span><br><span class="line">    <span class="keyword">while</span> (slow != fast)</span><br><span class="line">    &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linked-List-介绍&quot;&gt;&lt;a href=&quot;#Linked-List-介绍&quot; class=&quot;headerlink&quot; title=&quot;Linked List 介绍&quot;&gt;&lt;/a&gt;Linked List 介绍&lt;/h1&gt;&lt;p&gt;资料来源《程序员面试金典》第九章&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
    
      <category term="Linked List" scheme="https://crunchybiscuits.github.io/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>字符串和数组练习</title>
    <link href="https://crunchybiscuits.github.io/2020/08/02/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%95%B0%E7%BB%84%E7%BB%83%E4%B9%A0/"/>
    <id>https://crunchybiscuits.github.io/2020/08/02/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%95%B0%E7%BB%84%E7%BB%83%E4%B9%A0/</id>
    <published>2020-08-02T05:52:13.000Z</published>
    <updated>2020-08-02T04:00:51.217Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode思路总结-C"><a href="#LeetCode思路总结-C" class="headerlink" title="LeetCode思路总结(C#)"></a>LeetCode思路总结(C#)</h2><p>题目来自<a href="https://leetcode-cn.com/problemset/lcci/">LeetCode</a>，以及《程序员面试金典》第九章1.1-1.9</p><h2 id="例题1-1"><a href="#例题1-1" class="headerlink" title="例题1.1"></a>例题1.1</h2><p>实现一个算法，确定一个字符串 <code>s</code> 的所有字符是否全都不同。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s &#x3D; &quot;leetcode&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s&#x3D;&quot;abc&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>0 &lt;= len(s) &lt;=100</li><li>如果不适用额外数据结构更好</li></ul><h3 id="思路1："><a href="#思路1：" class="headerlink" title="思路1："></a>思路1：</h3><p>使用额外数据结构，通常情况下题目里是使用ASCII码表示，如果编码不是ASCII这个思路将行不通。</p><p>ASCII码一共有128个，我们可以声明一个数组，将ASCII码的编号作为数组下标来检查字符是否重复，比如’a’可以用Array[97]表示，‘A’可以用Array[65]表示</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">IsUnique</span>(<span class="params"><span class="keyword">string</span> astr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] char_num = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;astr.Length;i++)&#123;</span><br><span class="line">        char_num[astr[i]]++;</span><br><span class="line">        <span class="keyword">if</span>(char_num[astr[i]]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路2："><a href="#思路2：" class="headerlink" title="思路2："></a>思路2：</h3><p>不适用额外的数据结构，遍历字符串，每到一个字符的时候，检查剩余字符是否和当前字符相同。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">IsUnique</span>(<span class="params"><span class="keyword">string</span> astr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; astr.Length; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j&lt;astr.Length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(astr[i] == astr[j])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题1-3"><a href="#例题1-3" class="headerlink" title="例题1.3"></a>例题1.3</h2><p>URL化。编写一种方法，将字符串中的空格全部替换为%20。假定该字符串尾部有足够的空间存放新增字符，并且知道字符串的“真实”长度。（注：用Java实现的话，请使用字符数组实现，以便直接在数组上操作。）</p><p>示例1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：&quot;Mr John Smith    &quot;, 13</span><br><span class="line">输出：&quot;Mr%20John%20Smith&quot;</span><br></pre></td></tr></table></figure><p>示例2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：&quot;               &quot;, 5</span><br><span class="line">输出：&quot;%20%20%20%20%20&quot;</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>字符串长度在[0, 500000]范围内。</li></ul><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>先计算空格数量，再通过已知的字符串实际长度计算出URL化之后的字符串长度，设定一个计数器用于记录字符在新的字符串的实际位置</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">ReplaceSpaces</span>(<span class="params"><span class="keyword">string</span> S, <span class="keyword">int</span> length</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> space_count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(S[i] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            space_count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>[] temp = <span class="keyword">new</span> <span class="keyword">char</span>[length + space_count*<span class="number">2</span>];</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(S[i] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            temp[index++] = <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">            temp[index++] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">            temp[index++] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            temp[index++] = S[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">string</span>(temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题1-8"><a href="#例题1-8" class="headerlink" title="例题1.8"></a>例题1.8</h2><p>编写一种算法，若M × N矩阵中某个元素为0，则将其所在的行与列清零。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[</span><br><span class="line">  [1,1,1],</span><br><span class="line">  [1,0,1],</span><br><span class="line">  [1,1,1]</span><br><span class="line">]</span><br><span class="line">输出：</span><br><span class="line">[</span><br><span class="line">  [1,0,1],</span><br><span class="line">  [0,0,0],</span><br><span class="line">  [1,0,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[</span><br><span class="line">  [0,1,2,0],</span><br><span class="line">  [3,4,5,2],</span><br><span class="line">  [1,3,1,5]</span><br><span class="line">]</span><br><span class="line">输出：</span><br><span class="line">[</span><br><span class="line">  [0,0,0,0],</span><br><span class="line">  [0,4,5,0],</span><br><span class="line">  [0,3,1,0]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>最开始的时候，通过直接遍历找到0便置0，很快便把整个数组的所有数全部置0了，很明显这么做是错的，需要将得到的0分开记录，再根据记录将原有数组的行和列置0。</p><p>通过创建y(行)和x(列)的记录，根据这两个记录进行清零</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetZeroes</span>(<span class="params"><span class="keyword">int</span>[][] matrix</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">bool</span>[] y = <span class="keyword">new</span> <span class="keyword">bool</span>[matrix.Length];</span><br><span class="line">            <span class="keyword">bool</span>[] x = <span class="keyword">new</span> <span class="keyword">bool</span>[matrix[<span class="number">0</span>].Length];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; y.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x.Length; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(matrix[i][j] == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        y[i] = <span class="literal">true</span>;</span><br><span class="line">                        x[j] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; y.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (y[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x.Length; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt; x.Length; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (x[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; y.Length; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="例题-1-9"><a href="#例题-1-9" class="headerlink" title="例题 1.9"></a>例题 1.9</h2><p>字符串轮转。给定两个字符串s1和s2，请编写代码检查s2是否为s1旋转而成（比如，waterbottle是erbottlewat旋转后的字符串）。</p><p>示例1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s1 &#x3D; &quot;waterbottle&quot;, s2 &#x3D; &quot;erbottlewat&quot;</span><br><span class="line">输出：True</span><br></pre></td></tr></table></figure><p>示例2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s1 &#x3D; &quot;aa&quot;, s2 &#x3D; &quot;aba&quot;</span><br><span class="line">输出：False</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>字符串长度在[0, 100000]范围内。</li></ul><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>有点脑筋急转弯的意思，通过观察可以得到不管是s1还是s2，如果将s1和它本身进行拼接，必定包含s2将示例1的输入进行分解，我们可以看到waterbottle可以分成wat和erbottle两部分，s1=wat + erbottle，s2 = erbottle + wat。如果我们将s1和它本身进行拼接那么 s1 + s1 = wat + erbottle + wat + erbottle，可以看到s1 + s1 = wat + （erbottle + wat） + erbottle 里面是包含s2的，通过拼接就可以得出结果。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">IsFlipedString</span>(<span class="params"><span class="keyword">string</span> s1, <span class="keyword">string</span> s2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s1.Length != s2.Length)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(s1) &amp;&amp; <span class="keyword">string</span>.IsNullOrEmpty(s2))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">string</span> doubleS2 = s2 + s2;</span><br><span class="line">    <span class="keyword">if</span> (doubleS2.Contains(s1))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;LeetCode思路总结-C&quot;&gt;&lt;a href=&quot;#LeetCode思路总结-C&quot; class=&quot;headerlink&quot; title=&quot;LeetCode思路总结(C#)&quot;&gt;&lt;/a&gt;LeetCode思路总结(C#)&lt;/h2&gt;&lt;p&gt;题目来自&lt;a href=&quot;https
      
    
    </summary>
    
    
    
      <category term="Array and String" scheme="https://crunchybiscuits.github.io/tags/Array-and-String/"/>
    
  </entry>
  
  <entry>
    <title>BigO练习</title>
    <link href="https://crunchybiscuits.github.io/2020/07/24/BigO%E7%BB%83%E4%B9%A0/"/>
    <id>https://crunchybiscuits.github.io/2020/07/24/BigO%E7%BB%83%E4%B9%A0/</id>
    <published>2020-07-24T14:41:49.000Z</published>
    <updated>2020-07-24T12:41:49.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Big-O-练习"><a href="#Big-O-练习" class="headerlink" title="Big O 练习"></a>Big O 练习</h1><h2 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h2><p>题目来自《程序员面试金典》第六章例9</p><p>这段代码将平衡二叉搜索树的所有节点值相加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum(node.left) + node.value + sum(node.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法一：</p><p>由之前的基础介绍可知，通常情况下递归的时间复杂度为O(分支数^递归深度)。</p><p>二叉搜索树的高度约等于log2(N), N为节点数，分支为2，因此可得时间复杂度约为O(2^log2(N)）。</p><p>由2^P = Q 可得，P = log2(Q)。令P = 2^log2(N)，可得log2(P) = log2(N)，所以P = N，因此时间复杂度简化为O(N)</p><p>方法二：</p><p>因为需要所有节点值相加，所以需要遍历N个节点，因此式O(N)</p><h2 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h2><p>斐波那契数列的优化，取自《程序员面试金典》例14，例15</p><p>以下代码打印从0到n的斐波那契数列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">allFib</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        System.out.println(i + <span class="string">&quot;: &quot;</span> + fib(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一个陷阱，在看到fib有两支递归调用的时候，能够想到时间复杂度约等于O(2^N)，在外层使用N次循环，那么时间复杂度是O(N * 2^N)，其实并不。</p><p>在每一次调用fib的时候，都是2^N的形式</p><p>那么从1到N，fib函数的运行应该时间是2^1 + 2^2 + ··· + 2^N，这个式子约等于2^(N+1)，也就是说时间复杂度仍然为O(2^N)</p><hr><p>以下通过在allFib函数添加一个数组来保存被计算过的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">allFib</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] memo = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            System.out.println(i + <span class="string">&quot;: &quot;</span> +fib(i, memo));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[] memo)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (memo[n] &gt; <span class="number">0</span>) <span class="keyword">return</span> memo[n];</span><br><span class="line"></span><br><span class="line">        memo[n] = fib(n - <span class="number">1</span>, memo) + fib(n - <span class="number">2</span>, memo);</span><br><span class="line">        <span class="keyword">return</span> memo[n];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>算法的运行将会如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">fib(0) -&gt;return 0</span><br><span class="line">fib(1)-&gt;return 1</span><br><span class="line">fib(2)</span><br><span class="line">fib(1)-&gt;return 1</span><br><span class="line">fib(0)-&gt;return 0</span><br><span class="line">store 1at memo[2]</span><br><span class="line">fib(3)</span><br><span class="line">fib(2)-&gt;lookup memo[2]-&gt;return 1</span><br><span class="line">fib(1)-&gt;return 1</span><br><span class="line">store 2at memo[3]</span><br><span class="line">fib(4)</span><br><span class="line">fib(3)-&gt;lookup memo[3]-&gt;return 2</span><br><span class="line">fib(2)-&gt;lookup memo[2]-&gt;return 1</span><br><span class="line">store 3at memo[4]</span><br><span class="line">fib(5)</span><br><span class="line">fib(4)-&gt;lookup memo[4]-&gt;return 3</span><br><span class="line">fib(3)-&gt;lookup memo[3]-&gt;return 2</span><br><span class="line">store 5at memo[5]</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到，每次递归其实是直接从数组中取出之前的值，将不会进行更深层次的调用，也就是说这个过程只是进行了N次常数时间的操作，因此时间复杂度是O(N)。</p><h2 id="例三"><a href="#例三" class="headerlink" title="例三"></a>例三</h2><p> 取自《程序员面试金典》第六章附加题(11)</p><p>该段代码打印所有长度为<strong>K</strong>的字符串，字符串要求有序。代码先生成长度为K的字符串，再检测是否有序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> numChars = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSortedStrings</span><span class="params">(<span class="keyword">int</span> remaining)</span> </span>&#123;</span><br><span class="line">    printSortedStrings(remaining, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSortedStrings</span><span class="params">(<span class="keyword">int</span> remaining, String prefix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (remaining == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isInOrder(prefix)) &#123;</span><br><span class="line">            System.out.println(prefix);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numChars; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = ithLetter(i);</span><br><span class="line">            printSortedStrings(remaining - <span class="number">1</span>, prefix + c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isInOrder</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> prev = ithLetter(s.charAt(i - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">int</span> curr = ithLetter(s.charAt(i));</span><br><span class="line">        <span class="keyword">if</span> (prev &gt; curr) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">ithLetter</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">char</span>) (((<span class="keyword">int</span>) <span class="string">&#x27;a&#x27;</span>) + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的主要时间增加来自以下两段代码：</p><p>第一段是printSortedStrings中的循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numChars; i++) &#123;</span><br><span class="line">    <span class="keyword">char</span> c = ithLetter(i);</span><br><span class="line">    printSortedStrings(remaining - <span class="number">1</span>, prefix + c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是一个单只的递归调用，在长度为<strong>k</strong>的情形下，每一位都有26 (numChars = 26, 在开头有定义)中可能，因此是c^k的全排列，时间复杂度为O(c^k)</p><p>第二段是isInOrder中的循环用于检测字符串是否有序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isInOrder</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> prev = ithLetter(s.charAt(i - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">int</span> curr = ithLetter(s.charAt(i));</span><br><span class="line">        <span class="keyword">if</span> (prev &gt; curr) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串长度为<strong>k</strong>，因此每一次检测都需要O(k)的时间</p><p>因此总时间为每一次检测字符串有序的时间乘以生成的总字符串个数，时间复杂度为O(k*c^k)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Big-O-练习&quot;&gt;&lt;a href=&quot;#Big-O-练习&quot; class=&quot;headerlink&quot; title=&quot;Big O 练习&quot;&gt;&lt;/a&gt;Big O 练习&lt;/h1&gt;&lt;h2 id=&quot;例一&quot;&gt;&lt;a href=&quot;#例一&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
    
      <category term="BigO" scheme="https://crunchybiscuits.github.io/tags/BigO/"/>
    
  </entry>
  
  <entry>
    <title>BigO基础介绍02</title>
    <link href="https://crunchybiscuits.github.io/2020/07/23/BigO%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D02/"/>
    <id>https://crunchybiscuits.github.io/2020/07/23/BigO%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D02/</id>
    <published>2020-07-23T10:12:45.000Z</published>
    <updated>2020-07-23T08:19:44.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Big-O-基础介绍-二"><a href="#Big-O-基础介绍-二" class="headerlink" title="Big O 基础介绍(二)"></a>Big O 基础介绍(二)</h1><p>此文参考《程序员面试金典》(第六版)第六章。</p><h2 id="多项式算法的加和乘"><a href="#多项式算法的加和乘" class="headerlink" title="多项式算法的加和乘"></a>多项式算法的加和乘</h2><p>算法中常见的分步形式如下:</p><p><strong>O( A + B )</strong> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a : arrA)&#123;</span><br><span class="line">    print(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b : arrB)&#123;</span><br><span class="line">    print(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>O( A * B )</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a : arrA)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> b : arrB)&#123;</span><br><span class="line">        print(a + <span class="string">&quot;,&quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个例子，先遍历A数组，再遍历B数组，所以总数量是O( A + B )。</p><p>第二个例子，对A数组的每个元素都遍历B数组，所以总数量是O( A * B )。</p><ul><li>”先做这个，再做那个”的形式，就是加</li><li>“对这个的每个做那个”的形式，就是乘</li></ul><h2 id="分摊时间"><a href="#分摊时间" class="headerlink" title="分摊时间"></a>分摊时间</h2><p>在计算时间复杂度的时候常常会碰到最坏情况偶尔会出现，一旦发生会消耗很多资源，但是发生之后很长一段时间不会发生，因此需要兼顾正常情况和最坏情况，将时间进行”分摊“。</p><p>例如Java中<code>ArrayList</code>能够灵活的改变大小，能够随着你的插入进行扩容。</p><p><code>ArrayList</code>容量达到限制的时候会创建一个双倍容量的数组，将元素复制到新的数组里面。</p><p>那么描述<code>ArrayList</code>的插入时间，当数组没有满的时候，插入就是O(1)。</p><p>当数组满了，如果数组大小为N，那么需要扩容到2N，并把旧的值复制过去，那么插入就需要O(N)。</p><p>那么”分摊时间“该怎么计算？</p><p>假设需要插入N个元素，<code>ArrayList</code>数组的大小为2的幂数，<strong>当插入一个元素便扩容两倍</strong>。当元素是N的时候，以1，2，4，8，16，32……，N的数组大小成倍的扩容。每次操作需要复制1，2，4，8，16，……，N个元素。</p><p>那么消耗便是1 + 2 + 4 + 8 + 16 + ··· + N的和，从右往左计算便是 N + N/2 + N/4 + N/8 + ··· + 1的和，这个和约等于2N。</p><p>因此，N次插入需要的时间便是O(2N)， 即每次插入的分摊时间为O(1)。</p><h2 id="Log-N-运行时间"><a href="#Log-N-运行时间" class="headerlink" title="Log N 运行时间"></a>Log N 运行时间</h2><p>以二分查找为例。如果一个排序数组的长度为N，目标值为x。首先比较x和中值的大小，如果等于就直接返回，如果x小于便搜索数组中值左边的部分，如果x大于中值便搜索右边的部分。</p><p>开始的时候有N个元素，搜索一次后便是N/2，接着是N/4，直到找到目标或者需要搜索的元素变成1。</p><p>假设有N个元素，总的运行时间便是从N到1一共搜索了多少次。</p><p>如果开始有32个元素</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">N = 32</span><br><span class="line">N = 16 除以2</span><br><span class="line">N = 8  除以2</span><br><span class="line">N = 4  除以2</span><br><span class="line">N = 2  除以2</span><br><span class="line">N = 1  除以2</span><br></pre></td></tr></table></figure><p>从32到1，需要5次</p><p>如果从1开始看，从1到32则需要2^5</p><p>因此得到2^k = N，k = log2(N)</p><p>所以得到运行时间O(logN)</p><p>平衡二叉搜索树中也有同样的情况，每次搜索便将规模减半，最坏情况为平衡二叉搜索树的高度，也是O(logN)。</p><h2 id="递归运行时间"><a href="#递归运行时间" class="headerlink" title="递归运行时间"></a>递归运行时间</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f(n - <span class="number">1</span>) + f(n - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过模拟执行来显示运行时间，如果我们调用f(4)，那么会调用f(3)两次，每个f(3)又会调用f(2)两次，每个f(2)又会调用f(1)两次。如下图显示的节点展开。</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/CrunchyBiscuits/Image-Host/master/img/bigo4.jpg" alt="递归节点显示"></p><p>图中一共展开了多少节点？</p><table><thead><tr><th>层</th><th>节点数</th></tr></thead><tbody><tr><td>0</td><td>1</td></tr><tr><td>1</td><td>2 * 上一层节点数 = 2 * 1 = 2 = 2^1</td></tr><tr><td>2</td><td>2 * 上一层节点数 = 2 * 2 = 4 = 2^2</td></tr><tr><td>3</td><td>2 * 上一层节点数 = 2 * 4 = 8 = 2^3</td></tr></tbody></table><p>所以展开是2^0 + 2^1 + 2^2 + 2^3  =  2^4 -1 </p><p>扩展到N则是2^0 + 2^1 + 2^2 + 2^3 + ··· + 2^N = 2^(N+1) - 1</p><p>因此时间复杂度为O(2^(N+1) - 1)舍弃掉常数项为O(2^N)</p><p>常见递归中复杂度通常为，O(分支数^递归深度)，偶尔也有特殊情况。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Big-O-基础介绍-二&quot;&gt;&lt;a href=&quot;#Big-O-基础介绍-二&quot; class=&quot;headerlink&quot; title=&quot;Big O 基础介绍(二)&quot;&gt;&lt;/a&gt;Big O 基础介绍(二)&lt;/h1&gt;&lt;p&gt;此文参考《程序员面试金典》(第六版)第六章。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
    
      <category term="BigO" scheme="https://crunchybiscuits.github.io/tags/BigO/"/>
    
  </entry>
  
  <entry>
    <title>BigO基础介绍01</title>
    <link href="https://crunchybiscuits.github.io/2020/07/23/BigO%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D01/"/>
    <id>https://crunchybiscuits.github.io/2020/07/23/BigO%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D01/</id>
    <published>2020-07-23T02:52:53.000Z</published>
    <updated>2020-07-23T00:59:36.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Big-O-基础介绍-一"><a href="#Big-O-基础介绍-一" class="headerlink" title="Big O 基础介绍(一)"></a>Big O 基础介绍(一)</h1><p>此文参考《程序员面试金典》(第六版)第六章</p><p>大O符号在算法中用于描述算法效率。</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>时间复杂度(渐近运行时间)，也称为大O时间</p><p>举例：</p><p>假设有一个可以无限装下盒子的容器X，N个盒子，一个人P，地点A和B，从A到B运送时间相同。</p><p>方法一：P一次只能从A到B运送一个盒子</p><p>方法二：P也可以选择直接将盒子都装进X再从A到B运送容器X</p><p>使用方法一，随着盒子数目的增加，所消耗的时间也将线性增加，可以表示为O(N)</p><p>使用方法二，无论盒子怎么增加X都能装下，因此运送时间是固定的常量，可表示为O(1)</p><p>时间复杂度也能有很多的变量，比如给一个长X，宽Y，高Z的泳池注水，那么可以表示为O(XYZ)</p><h2 id="O、θ-和Ω"><a href="#O、θ-和Ω" class="headerlink" title="O、θ 和Ω"></a>O、<em>θ</em> 和<em>Ω</em></h2><p>学术界描述运行时间有三种，Big O、Big θ (theta) 和 Big <em>Ω</em> (omega)</p><ul><li>Big O：用于描述运行时间的上界，假设一个算法可以描述为O(N)，那么也可以描述为O(N^2)。类似于，假设一个人可以活到130岁，那么年龄X&lt;=130，也可以说年龄X&lt;=1000，因为130是肯定小于1000的，这里的130就是上界。</li><li>Big <em>Ω</em> (omega)：用于描述运行时间的下界</li><li>Big θ (theta)：用于描述运行时间的确界，如果一个算法为 θ(N)，那么它既是O(N)，也是Ω(N)</li></ul><p>在工业界中直接用O(N)表示确界。</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>空间复杂度为算法占用的内存数量或者空间大小</p><p>如果要创建大小为N的数组那么需要的空间为O(N)。如果是n <strong>x</strong> n的数组，需要的空间为O(N^2)。</p><p>在递归里栈的空间也要算在内。下列sum函数运行时间为O(N)，空间也为O(N)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n + sum(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈的调用过程如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sum(<span class="number">4</span>)</span><br><span class="line"> -&gt;sum(<span class="number">3</span>)</span><br><span class="line">   -&gt;sum(<span class="number">2</span>)</span><br><span class="line">     -&gt;sum(<span class="number">1</span>)</span><br><span class="line">       -&gt;sum(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>这里的递归调用都会添加到调用栈里并占用实际内存。</p><p>但是并不是n次调用都会占用O(N)的空间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pairSumSequence</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        sum += pairSum(i, i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pairSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pairSum方法调用n次，但是调用并不像递归那样同时发生，所以仅仅需要O(1)的空间。</p><h2 id="删除常量"><a href="#删除常量" class="headerlink" title="删除常量"></a>删除常量</h2><p>在特定时候O(N)可能比O(1)还快。例如下图</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/CrunchyBiscuits/Image-Host/master/img/bigo1.jpg" alt="O(N)、O(1)比较, 取自《程序员面试金典》"></p><p>时间复杂度描述的仅仅是算法时间的增长趋势，因此常量不计算在运行时间中。</p><p>例如O(2N)实际上是O(N)，不少人会认为代码中两个非嵌套的循环就是O(2N)这样描述更精确，其实并不。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line"><span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x : array)&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; min) min = x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; max) max = x;</span><br><span class="line">&#125;</span><br><span class="line">#************************************</span><br><span class="line"><span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line"><span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x : array)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; min) min = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x : array)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; max) max = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上两段代码，第一段一个for循环，第二段两个for循环，但是第一个for循环里有两行，这个要怎么考虑呢？如果真的要详细计算时间复杂度，需要考虑汇编层次，乘法比加法多了多少指令，还要考虑编译器怎么优化等细节，太多太多了。这会让O的计算变得复杂。<strong>我们只需要知道一点，O(N)并不总是比O(N^2)快。</strong></p><h2 id="丢弃不重要的项"><a href="#丢弃不重要的项" class="headerlink" title="丢弃不重要的项"></a>丢弃不重要的项</h2><p>由O(2N)会舍弃常量变成O(N)可知，O(2N^2)会舍弃常量变成O(N^2)，那么O(N^2 + N)该怎么处理？</p><p>由O(2N^2)会舍弃常量变成O(N^2)可知，O(2N^2)可以表示为O(N^2 + N^2)，这里直接舍弃掉了一个N^2。因为 N &lt; N^2 所以O(N^2 + N)也会变成O(N^2)。<img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/CrunchyBiscuits/Image-Host/master/img/bigo2.jpg" alt="例子"></p><p>特殊情况依旧存在，有的时候需要用和的形式表示运行时间。例如，O(B^2) + A 就已经是最简化的形式了。</p><p>下图是常见几个时间复杂度的增长速率。</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/CrunchyBiscuits/Image-Host/master/img/bigo3.jpg" alt="增长速率"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Big-O-基础介绍-一&quot;&gt;&lt;a href=&quot;#Big-O-基础介绍-一&quot; class=&quot;headerlink&quot; title=&quot;Big O 基础介绍(一)&quot;&gt;&lt;/a&gt;Big O 基础介绍(一)&lt;/h1&gt;&lt;p&gt;此文参考《程序员面试金典》(第六版)第六章&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
    
      <category term="BigO" scheme="https://crunchybiscuits.github.io/tags/BigO/"/>
    
  </entry>
  
  <entry>
    <title>PicGo+Github搭建图床</title>
    <link href="https://crunchybiscuits.github.io/2020/07/19/PicGo-Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
    <id>https://crunchybiscuits.github.io/2020/07/19/PicGo-Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</id>
    <published>2020-07-18T16:26:32.000Z</published>
    <updated>2020-07-25T02:10:41.804Z</updated>
    
    <content type="html"><![CDATA[<p>本文写于2020-07-19，请参考时考虑时间以及软件版本</p><p>PicGo+Github搭建图床，方便图片上传、管理以及方便markdown的引用，<a href="https://juejin.im/entry/5c4ec5aaf265da614420689f">文章参考</a></p><h2 id="Github图床设置"><a href="#Github图床设置" class="headerlink" title="Github图床设置"></a>Github图床设置</h2><p>进入自己的Github账户，创建新的Repository并命名, 因为这里笔者已经创建过Image-Host的库，所以显示重名。</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/CrunchyBiscuits/Image-Host/master/img/github_2020-07-19_00-48-53.jpg" alt="创建新的Repository"></p><p>接着进入账户设置</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/CrunchyBiscuits/Image-Host/master/img/github1_2020-07-19_00-53-51.jpg" alt="进入账户设置"></p><p>进入Developer settings</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/CrunchyBiscuits/Image-Host/master/img/github2_2020-07-19_00-56-12.jpg" alt="Developer settings"></p><p>点击Generate new token</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/CrunchyBiscuits/Image-Host/master/img/github3_2020-07-19_01-00-54.jpg" alt="Generate new token"></p><p>为token添加描述，并点选repo, 接着点击最下方的Generate token按钮即可</p><p><strong>注意：创建好后会生成一串token，此token只在github上显示一次，请妥善保存</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/CrunchyBiscuits/Image-Host/master/img/github4_2020-07-19_01-04-59.jpg" alt="token设置"></p><h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><p>PicGo为免费开源图床管理工具，<a href="https://github.com/Molunerfinn/PicGo">下载地址在这</a><br>Windows, Mac, Linux系统都有支持<br>并且支持多种平台，如阿里云，腾讯云等</p><p>本文使用PicGo 2.2.2 ，下载好后如图所示<br><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/CrunchyBiscuits/Image-Host/master/img/picgo_2020-07-19_00-35-15.jpg" alt="PicGo界面"></p><p>点开PicGo设置，因为仅使用Github作为图床，所以将剩余的平台显示关闭</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/CrunchyBiscuits/Image-Host/master/img/picgo1_2020-07-19_00-40-03.jpg" alt="PicGo设置"></p><p>点击打开图床设置</p><ul><li>设定仓库名：Github账户名/仓库名</li><li>设定分支名：需填写为master</li><li>设定Token：将在github中生成的token填入</li><li>存储路径：可按自己意愿设定，之后会在github库中创建对应名称文件夹，下图会创建img文件夹</li><li>自定义域名：用于图片的引用和访问，<strong>注意格式必须为<code>https://raw.githubusercontent.com/</code>账户名/仓库名/分支名</strong>，图中为<code>https://raw.githubusercontent.com/CrunchyBiscuits/Image-Host/master</code></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/CrunchyBiscuits/Image-Host/master/img/picgo2_2020-07-19_01-10-53.jpg" alt="图床设置"></p><p>设定完成便可方便的上传以及管理图片</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文写于2020-07-19，请参考时考虑时间以及软件版本&lt;/p&gt;
&lt;p&gt;PicGo+Github搭建图床，方便图片上传、管理以及方便markdown的引用，&lt;a href=&quot;https://juejin.im/entry/5c4ec5aaf265da614420689f&quot;
      
    
    </summary>
    
    
    
      <category term="Github" scheme="https://crunchybiscuits.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>MarkdownCheatSheet</title>
    <link href="https://crunchybiscuits.github.io/2020/07/17/MarkdownCheatSheet/"/>
    <id>https://crunchybiscuits.github.io/2020/07/17/MarkdownCheatSheet/</id>
    <published>2020-07-16T17:28:38.000Z</published>
    <updated>2020-07-18T23:56:45.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用Markdown语法"><a href="#常用Markdown语法" class="headerlink" title="常用Markdown语法"></a>常用Markdown语法</h1><p>仅列出常用的markdown语法，有不少情况没有列出可参考<a href="https://crunchybiscuits.github.io/2020/07/14/Markdown基础语法/">Markdown基础语法</a></p><table><thead><tr><th>类型</th><th>语法</th></tr></thead><tbody><tr><td>标题</td><td># 一级标题<br>## 二级标题<br>### 三级标题</td></tr><tr><td>加粗</td><td>*<em>文本*</em></td></tr><tr><td>斜体</td><td>*斜体*</td></tr><tr><td>有序列表</td><td>1. first<br>2. second<br>3. third</td></tr><tr><td>无序列表</td><td>- first<br>- second<br>- third</td></tr><tr><td>单行代码</td><td>`代码`</td></tr><tr><td>分隔符</td><td>***</td></tr><tr><td>链接</td><td>[title](<a href="https://example.com">https://example.com</a>)</td></tr><tr><td>图片</td><td>![text](image.jpg)</td></tr><tr><td>块引用</td><td>&gt; 块引用</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常用Markdown语法&quot;&gt;&lt;a href=&quot;#常用Markdown语法&quot; class=&quot;headerlink&quot; title=&quot;常用Markdown语法&quot;&gt;&lt;/a&gt;常用Markdown语法&lt;/h1&gt;&lt;p&gt;仅列出常用的markdown语法，有不少情况没有列出可参考&lt;
      
    
    </summary>
    
    
    
      <category term="Markdown" scheme="https://crunchybiscuits.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Markdown基础语法</title>
    <link href="https://crunchybiscuits.github.io/2020/07/14/Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://crunchybiscuits.github.io/2020/07/14/Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2020-07-14T15:08:30.000Z</published>
    <updated>2020-07-18T23:56:24.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown-基础语法"><a href="#Markdown-基础语法" class="headerlink" title="Markdown 基础语法"></a>Markdown 基础语法</h1><p>Markdown 纯文本标记语言，语法简单易用且支持Markdown的地方都能有一样的效果，此文主要介绍基本语法，<a href="https://www.markdownguide.org/basic-syntax/">文章参考</a>。</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>标题以#开头，一个#表示一级标题，两个#表示二级标题，以此类推，最多到六级标题<br>#后需要接空格，不接空格有的可以识别，有的不行。</p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/CrunchyBiscuits/Image-Host/master/img/markdown_2020-07-16_15-48-29.jpg" alt="各级标题效果"></p><hr><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>三个或以上的 * 或者 - 都有相同效果</p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">------</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong">****</span><span class="strong">**</span></span></span></span><br></pre></td></tr></table></figure><p>效果：</p><hr><hr><hr><hr><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>超链接格式:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">名字</span>](<span class="link">链接</span>)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">谷歌</span>](<span class="link">https://www.google.com/</span>)</span><br><span class="line">[<span class="string">哔哩哔哩</span>](<span class="link">https://www.bilibili.com/</span>)</span><br></pre></td></tr></table></figure><p>效果：</p><p><a href="https://www.google.com/">谷歌</a></p><p><a href="https://www.bilibili.com/">哔哩哔哩</a></p><hr><h2 id="字体相关"><a href="#字体相关" class="headerlink" title="字体相关"></a>字体相关</h2><p>常见字体操作 <strong>加粗</strong>，<em>斜体</em>，<strong><em>斜体加粗</em></strong>，<del>删除线</del></p><p>示例:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**加粗**</span></span><br><span class="line"><span class="emphasis">*斜体*</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*斜体加粗<span class="strong">**<span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">~~删除线~~</span></span></span></span></span><br></pre></td></tr></table></figure><p>效果：</p><p><strong>加粗</strong></p><p><em>斜体</em></p><p><strong><em>斜体加粗</em></strong></p><p><del>删除线</del></p><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在引用段落前添加 &gt;</p><p>如果引用段落有多行，需要每行添加 &gt;</p><p>嵌套引用则使用多个 &gt;</p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 第一行引用</span></span><br><span class="line"><span class="quote">&gt; 第二行引用</span></span><br><span class="line">&gt;&gt; 嵌套引用</span><br></pre></td></tr></table></figure><p>效果：</p><blockquote><p>第一行引用</p><p>第二行引用</p><blockquote><p>嵌套引用</p></blockquote></blockquote><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>单行代码使用``包含</p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`print(&#x27;hello world&#x27;)`</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><code>print(&#39;hello world&#39;)</code></p><p>多行代码前后使用```包含</p><p>这里直接使用```会有格式错误，用括号包起来了</p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="code">```)</span></span><br><span class="line"><span class="code">public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="code">    System.out.println();</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">(```)</span></span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>数字加点的形式（如 1.）</p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一行</span><br><span class="line"><span class="bullet">2.</span> 第二行</span><br><span class="line"><span class="bullet">3.</span> 第三行</span><br></pre></td></tr></table></figure><p>效果：</p><ol><li>第一行</li><li>第二行</li><li>第三行</li></ol><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>在一行前使用 - ,+ ,* 任意一个即可 </p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 第1行</span><br><span class="line"><span class="bullet">+</span> 第2行</span><br><span class="line"><span class="bullet">*</span> 第3行</span><br></pre></td></tr></table></figure><p>效果：</p><ul><li>第一行</li></ul><ul><li>第二行</li></ul><ul><li>第三行</li></ul><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>语法&amp;示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">这里是图片描述，显示在图片下方</span>](<span class="link">图片地址 &quot;title，鼠标移动到图片上时显示&quot;</span>)</span><br><span class="line"></span><br><span class="line">![<span class="string"> bilibili banner</span>](<span class="link">https://i0.hdslb.com/bfs/archive/22650682fd25a4a5aa96dd9ef53190c6b8d54912.png &quot;bilibili banner&quot;</span>)</span><br></pre></td></tr></table></figure><p>效果（点开可看到图片描述）</p><p><img src= "/img/loading.gif" data-lazy-src="https://i0.hdslb.com/bfs/archive/22650682fd25a4a5aa96dd9ef53190c6b8d54912.png" alt=" bilibili banner"></p><p>图片链接支持本地、网络链接以及将图片转码成base64存入markdown文件中</p><p>这里使用了PicGo+Github图床的方式</p><hr><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>语法格式：</p><p>其中每列的表头和内容用三个或三个以上 “-“ ( — ) 隔开，并用”|”分隔每一列</p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 第一列 | 第二列 |</span><br><span class="line">| ----- | ----- |</span><br><span class="line">| zs    | 1     |</span><br><span class="line">| ls    | 2     |</span><br></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th>第一列</th><th>第二列</th></tr></thead><tbody><tr><td>zs</td><td>1</td></tr><tr><td>ls</td><td>2</td></tr></tbody></table><h3 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h3><p>通过在”—“处的左边，右边或者两边，来添加左对齐，右对齐和居中的效果</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| 第一列 | 第二列 | 第三列 |</span><br><span class="line">| :----- | :-----: | -----: |</span><br><span class="line">| 靠左   | 居中   | 靠右  |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">第一列</th><th align="center">第二列</th><th align="right">第三列</th></tr></thead><tbody><tr><td align="left">靠左</td><td align="center">居中</td><td align="right">靠右</td></tr></tbody></table><hr><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>通过在字符前添加”\“，来防止字符被用于markdown文本格式</p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> hello </span><br><span class="line">\<span class="emphasis">* hello</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"><span class="strong">**world**</span></span></span><br><span class="line"><span class="emphasis">\*</span>\<span class="emphasis">*world<span class="strong">**</span></span></span><br></pre></td></tr></table></figure><p>效果：</p><ul><li>hello </li></ul><p>* hello</p><p><strong>world</strong></p><p>**world**</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Markdown-基础语法&quot;&gt;&lt;a href=&quot;#Markdown-基础语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown 基础语法&quot;&gt;&lt;/a&gt;Markdown 基础语法&lt;/h1&gt;&lt;p&gt;Markdown 纯文本标记语言，语法简单易用且支持
      
    
    </summary>
    
    
    
      <category term="Markdown" scheme="https://crunchybiscuits.github.io/tags/Markdown/"/>
    
  </entry>
  
</feed>
